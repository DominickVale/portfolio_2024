---
//@TODO: implement animation + infinite
import type { HTMLAttributes } from 'astro/types'
import { twMerge } from 'tailwind-merge'

type Props = {
  tags: string[]
  animated?: boolean
} & HTMLAttributes<'div'>

const { tags, animated, class: classes } = Astro.props
---

<div
  class:list={twMerge(
    'marquee-container absolute left-0 right-0 top-0 overflow-hidden bg-background-dark-05 pt-1.5 text-xs text-white',
    classes,
    animated && 'animated',
  )}
>
  <div class="marquee flex min-w-max gap-3">
    {
      Array.from(Array(5).keys()).map((_) => (
        <span class="flex flex-nowrap items-center gap-3">
          {tags.map((t) => (
            <>
              <span class="marquee-tag">{t}</span>
              <div class="marquee-dot" />
            </>
          ))}
        </span>
      ))
    }
  </div>
</div>

<style is:global>
  .marquee-tag {
    position: relative;
    @apply text-xs;
    @apply ml-1;
  }

  .marquee-dot {
    height: 0.2rem;
    width: 0.2rem;
    border-radius: 50%;
    background-color: white;
    opacity: 70%;
  }

  .marquee-container.animated .marquee > span {
    animation: marquee 30s infinite linear;
  }

  @keyframes marquee {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-200%);
    }
  }
</style>
