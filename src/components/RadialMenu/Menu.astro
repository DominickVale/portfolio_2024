<div
  id="radial-menu"
  class="fixed left-1/2 top-1/2 h-96 w-96 border-2 border-solid border-green-500"
>
  <div id="radial-menu-content" class="relative flex items-center justify-center border-2 border-solid border-blue-500 w-full h-full">
    <div 
      class="font-xs h-6 w-6 rounded-full bg-white text-center text-black"
    >
      ICON
    </div>
  </div>
</div>

<style></style>

<script>
  import { $, degToRad, radToDeg } from '../../app/utils'

  console.log('Creating radial menu')
  const mockElements = [
    {
      id: '1',
      name: 'Home',
      icon: '🏠',
    },
    {
      id: '2',
      name: 'Projects',
      icon: '🏗️',
    },
    {
      id: '1',
      name: 'Home',
      icon: '🏠',
    },
    {
      id: '2',
      name: 'Projects',
      icon: '🏗️',
    },
    {
      id: '2',
      name: 'Projects',
      icon: '🏗️',
    },
  ]

const menuEl = $('#radial-menu')
const menuContentEl = $('#radial-menu-content')
const menuBounds = menuEl.getBoundingClientRect()
const menuSize = {
    width: menuBounds.width,
    height: menuBounds.height,
}
const menuCenter = {
    x: menuSize.width / 2,
    y: menuSize.height / 2,
}

const RADIUS = 100
const INNER_RADIUS = 10
const svgNS = "http://www.w3.org/2000/svg";

const radialMenu = document.createElementNS(svgNS, "svg");
radialMenu.style.position = "fixed";
radialMenu.style.top = "10vh"
radialMenu.style.left = "10vw"
radialMenu.setAttribute("width", "100%");
radialMenu.setAttribute("height", "100%");
radialMenu.setAttribute("viewBox", `0 0 ${menuSize.width} ${menuSize.height}`);

const sliceAngle = (2 * Math.PI) / mockElements.length;

for (let i = 0; i < mockElements.length; i++) {
    const startAngle = i * sliceAngle;
    const endAngle = startAngle + sliceAngle;

    const slice = document.createElementNS(svgNS, "path");
    slice.setAttribute("fill", "gray");
    slice.setAttribute("stroke", "black");
    slice.setAttribute("stroke-width", "1");

    const outerStartX = menuCenter.x + RADIUS * Math.cos(startAngle);
    const outerStartY = menuCenter.y + RADIUS * Math.sin(startAngle);
    const outerEndX = menuCenter.x + RADIUS * Math.cos(endAngle);
    const outerEndY = menuCenter.y + RADIUS * Math.sin(endAngle);

    const innerStartX = menuCenter.x + INNER_RADIUS * Math.cos(startAngle);
    const innerStartY = menuCenter.y + INNER_RADIUS * Math.sin(startAngle);
    const innerEndX = menuCenter.x + INNER_RADIUS * Math.cos(endAngle);
    const innerEndY = menuCenter.y + INNER_RADIUS * Math.sin(endAngle);

    const pathData = `M ${outerStartX} ${outerStartY}
                      A ${RADIUS} ${RADIUS} 0 0 1 ${outerEndX} ${outerEndY}
                      L ${innerEndX} ${innerEndY}
                      A ${INNER_RADIUS} ${INNER_RADIUS} 0 0 0 ${innerStartX} ${innerStartY}
                      Z`;

    slice.setAttribute("d", pathData);
    slice.style.cursor = "pointer";
    slice.addEventListener("mouseenter", () => slice.setAttribute("fill", "red"));
    slice.addEventListener("mouseleave", () => slice.setAttribute("fill", "gray"));

    radialMenu.appendChild(slice);
}

menuEl.appendChild(radialMenu)
</script>
