---
import Layout from '../layouts/Layout.astro'
import NextPageBtn from '../components/NextPageBtn.astro'
import Btn from '../components/Btn.astro'
import WorkDetails from '../components/WorkDetails.astro'
import Image from '../components/Image.astro'
import FakeLogs from '../components/FakeLogs.astro'
interface Props {}

const {} = Astro.props
const projectsList = ['ambientify', 'vidra', 'e-corp ctf', 'portfolio v1']
const mockData = [
  { label: 'ROLE:', value: 'EVERYTHING' },
  { label: 'CLIENT:', value: 'N/A' },
  { label: 'YEAR:', value: '2020—ONGOING' },
  {
    label: 'TECH:',
    value: 'REACT-NATIVE, FIREBASE, ANDROID NDK, JSI, C++, REVENUECAT, KOTLIN',
  },
]
---

<Layout title="Dominick Vale - ⓒ 2024" data-menu-trigger="default">
  <h1 class="sr-only">WORKS</h1>
  <div
    class="mb-18 col-span-10 col-start-2 row-start-1 mt-12 flex flex-col justify-center xl:col-span-4 xl:col-start-2 xl:row-start-1 xl:mt-0 laptop-h:justify-start"
  >
    <FakeLogs />
    <div class="xl:ml-4 xl:mt-[3vh]">
      <div class="relative flex flex-col justify-center">
        <Image
          contain
          class="relative my-auto flex items-center justify-center overflow-hidden 2xl:h-[45vh] 2xl:min-h-80"
        />
        <!-- <div class="absolute bottom-[-5vh] left-1/2 h-[4vh] w-[1px] bg-lines"></div> -->
        <div class="mt-6 hidden max-w-[90%] xl:block 2xl:max-w-[30rem]">
          <table class="text-xs">
            <WorkDetails />
          </table>
        </div>

        <div class="mt-4 w-full xl:hidden">
          <WorkDetails small />
        </div>
      </div>
    </div>

    <!-- <div class="mt-6 flex justify-center sm:hidden"> -->
    <!--   <NextPageBtn>BLOG</NextPageBtn> -->
    <!-- </div> -->
  </div>

  <div class="ml-8 col-span-1 col-start-12 mb-14 hidden h-full items-center sm:flex">
    <NextPageBtn>BLOG</NextPageBtn>
  </div>

  <section
    class="col-span-4 col-start-8 row-start-1 hidden flex-col gap-[10vh] pt-[10vh] xl:flex"
  >
    <!-- TODO: add js impl w/ dynamic height -->
    <div class="relative">
      <div id="highlighted-corner" class="fui-corners h-[13vh]">
        <div class="absolute bottom-[-2.7rem] right-0 flex w-3/4 gap-3">
          <Btn class="w-full pt-6 pl-2 pb-3 justify-start" frame>READ CASE</Btn>
          <Btn class="w-full pt-6 pl-2 pb-3 justify-start" frame>VISIT WEBSITE</Btn>
        </div>
        <small
          class="absolute left-5 top-[-1rem] text-xxs font-normal tracking-widest opacity-40"
          >PROJ_ID: 001</small
        >
      </div>
    </div>
    {
      projectsList.map((name, i) => (
        <h2
          class="project-title w-full font-display text-6xl font-bold uppercase text-primary-lightest"
          style={`--i: ${i}`}
          data-active={i === 0}
        >
          <a href={`/works/${name}`}>{name}</a>
        </h2>
      ))
    }
  </section>
  <section
    class="col-span-10 col-start-2 row-start-2 flex flex-col text-center xl:hidden"
  >
    {
      projectsList.map((name, i) => (
        <h2
          class="project-title-mobile w-full font-display text-2xl font-bold uppercase text-primary-lightest"
          style={`--i: ${i}`}
          data-active={i === 0}
        >
          <a href={`/works/${name}`}>{name}</a>
        </h2>
      ))
    }
  </section>
</Layout>

<style>
  /* use data-active for active element */
  .project-title:not([data-active='true']) {
    transform-origin: bottom left;
  }
  .project-title[data-active='true'] {
    margin-bottom: 5vh;
    color: white;
    font-size: theme('fontSize.7xl'); /* will be calc dynamically in js */
  }
  #highlighted-corner {
    left: -5%;
    width: 105%;
  }
</style>

<script>
  import { $, $all, debounce } from '../app/utils'
  const projectsList = ['ambientify', 'vidra', 'e-corp ctf', 'portfolio v1'].map((p, i) => ({
    name: p,
    id: i,
    fontSize: 0
  }))

  document.addEventListener('DOMContentLoaded', () => {
    let currIdx = 0
    let projects: HTMLElement[] = []
    const highlightedCorner = $('#highlighted-corner')
    const highlightedCornerBounds = highlightedCorner.getBoundingClientRect()
    const initialHighlightCornerTop = highlightedCorner.getBoundingClientRect().top
    const originalCornerSize = highlightedCornerBounds

    const recalculateActiveFontSize = (text: HTMLElement) => {
      const innerText = text.querySelector("a")
      const containerBounds = originalCornerSize
      let fontSize = containerBounds.height
      text.style.fontSize = fontSize + "px"
      let textHeight = innerText.offsetHeight
      let textWidth = innerText.offsetWidth
      if(textHeight > containerBounds.height || textWidth >  containerBounds.width ) {
        for (let i = 0; textHeight > containerBounds.height || textWidth > containerBounds.width; i++) {
          fontSize--;
          text.style.fontSize = fontSize + "px";
          textHeight = innerText.offsetHeight
          textWidth = innerText.offsetWidth
        }
      }
      return fontSize
    }

    function recalculateOthers(){
      projects.forEach((p, i) => {
        p.setAttribute('data-active', 'false')
        const opacity =  (1 - Math.abs(i - currIdx) / projectsList.length) * 0.5
        const fontSize = projectsList[i].fontSize / Math.max(2, Math.abs(i - currIdx) + 1/projects.length )
        const blur = Math.pow(Math.abs(i - currIdx), 1.25)
        p.style.opacity = String(i === currIdx ? 1 : opacity)
        p.style.fontSize = fontSize + "px";
        p.style.filter = `blur(${blur}px)`
      })
    }

    function recalculateActive() {
      const activeProject = projects[currIdx]

      activeProject?.setAttribute('data-active', 'true')
      recalculateActiveFontSize(activeProject)
      activeProject.style.display = "block"
    }

    function recalculateHighlightedCorner() {
      const activeProject = projects[currIdx]
      const top = activeProject.offsetTop + window.pageYOffset - initialHighlightCornerTop
      highlightedCorner.style.top = `calc(${top}px - 0.5rem)`
    }

    function handleActiveProject(e) {
      const direction = e.deltaY > 0 ? 'down' : 'up'
      if (direction === 'down') {
        currIdx = (currIdx + 1) % projectsList.length
      } else {
        currIdx = currIdx - 1
        currIdx = currIdx < 0 ? projectsList.length - 1 : currIdx
      }
      recalculateOthers()
      recalculateActive()
      recalculateHighlightedCorner()
    }
    const debouncedFn = debounce(handleActiveProject, 100)

    projects = Array.from($all('.project-title'))

    projects.forEach((p, i) => {
      projectsList[i].fontSize = recalculateActiveFontSize(p)
    })

    console.log(projectsList)
    recalculateOthers()
    recalculateActive()
    recalculateHighlightedCorner()
    window.addEventListener('wheel', debouncedFn.bind(this))
    window.addEventListener('resize', debouncedFn.bind(this))
  })
</script>
