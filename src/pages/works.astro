---
import Layout from '../layouts/Layout.astro'
import NextPageBtn from '../components/NextPageBtn.astro'
import Btn from '../components/Btn.astro'
import WorkDetails from '../components/WorkDetails.astro'
import Image from '../components/Image.astro'
import FakeLogs from '../components/FakeLogs.astro'
interface Props {}

const {} = Astro.props
const projectsList = ['ambientify', 'vidra', 'e-corp ctf', 'portfolio v1']
const projectList = [
  {
    name: 'ambientify',
    linkWebsite: 'https://play.google.com/store/apps/details?id=com.dominickv.ambientify&hl=en_US',
    linkCase: '/works/ambientify'
  },
  {
    name: 'vidra',
    linkWebsite: 'https://web.archive.org/web/20210727234808/https://www.vidra.com/',
    linkCase: '/works/vidra'
  },
  {
    name: 'e-corp ctf',
    linkWebsite: 'https://ecorp.ctf.intigriti.io',
    linkCase: '/works/e-corp-ctf'
  },
  {
    name: 'portfolio v1',
    linkWebsite: 'https://domenicovale.netlify.app',
    linkCase: '/works/portfolio-v1'
  }
]

const mockData = [
  { label: 'ROLE:', value: 'EVERYTHING' },
  { label: 'CLIENT:', value: 'N/A' },
  { label: 'YEAR:', value: '2020—ONGOING' },
  {
    label: 'TECH:',
    value: 'REACT-NATIVE, FIREBASE, ANDROID NDK, JSI, C++, REVENUECAT, KOTLIN',
  },
]
---

<Layout title="Dominick Vale - ⓒ 2024" data-menu-trigger="default">
  <h1 class="sr-only">WORKS</h1>
  <div
    class="mb-18 col-span-10 col-start-2 row-start-1 mt-12 flex flex-col justify-center xl:col-span-4 xl:col-start-2 xl:row-start-1 xl:mt-0 laptop-h:justify-start"
  >
    <FakeLogs />
    <div class="xl:ml-4 xl:mt-[3vh]">
      <div class="relative flex flex-col justify-center">
        <Image
          contain
          class="relative my-auto flex items-center justify-center overflow-hidden 2xl:h-[45vh] 2xl:min-h-80"
        />
        <!-- <div class="absolute bottom-[-5vh] left-1/2 h-[4vh] w-[1px] bg-lines"></div> -->
        <div class="mt-6 hidden max-w-[90%] xl:block 2xl:max-w-[30rem]">
          <table class="text-xs">
            <WorkDetails />
          </table>
        </div>

        <div class="mt-4 w-full xl:hidden">
          <WorkDetails small />
        </div>
      </div>
    </div>

    <!-- <div class="mt-6 flex justify-center sm:hidden"> -->
    <!--   <NextPageBtn>BLOG</NextPageBtn> -->
    <!-- </div> -->
  </div>

  <div class="ml-8 col-span-1 col-start-12 mb-14 hidden h-full items-center sm:flex">
    <NextPageBtn>BLOG</NextPageBtn>
  </div>

  <section
    id="works-list"
    class="col-span-4 col-start-8 row-start-1 hidden flex-col gap-[6vh] pt-[10vh] xl:flex"
  >
    {
      projectsList.map((name, i) => (
        <h2
          class="project-title h-[10vh] w-full font-display font-bold uppercase text-primary-lightest relative"
          style={`--i: ${i}`}
          data-active={i === 0}
        >
          <a class="block w-max leading-[100%]" href={`/works/${name}`}>{name}</a>
          <div class="fui-corners highlighted-corner h-[12vh] font-mono hidden">
            <div class="absolute bottom-[-2.7rem] right-0 flex w-3/4 gap-3">
              <Btn class="w-full pt-6 pl-2 pb-3 justify-start" frame>READ CASE</Btn>
              <Btn class="w-full pt-6 pl-2 pb-3 justify-start" frame>VISIT WEBSITE</Btn>
            </div>
            <small
              class="absolute left-5 top-[-1rem] text-xxs font-normal tracking-widest opacity-40"
              >PROJ_ID: 001</small
            >
          </div>
        </h2>
      ))
    }
  </section>
  <section
    class="col-span-10 col-start-2 row-start-2 flex flex-col text-center xl:hidden"
  >
    {
      projectsList.map((name, i) => (
        <h2
          class="project-title-mobile w-full font-display text-2xl font-bold uppercase text-primary-lightest"
          style={`--i: ${i}`}
          data-active={i === 0}
        >
          <a href={`/works/${name}`}>{name}</a>
        </h2>
      ))
    }
  </section>
</Layout>

<style>
  /* use data-active for active element */
  .project-title:not([data-active='true']) {
    transform-origin: bottom left;
  }
  .project-title{
    transition: all 0.1s ease-out;
    font-size: 10vh;
  }
  .project-title[data-active='true'] {
    /* margin-bottom: 5vh; */
    color: white;
  }
  .highlighted-corner{
    width: 110%;
    left: -5%;
    top: -15%;
  }
</style>

<script>
  import { $, $all, debounce } from '../app/utils'

  document.addEventListener('DOMContentLoaded', () => {
    let currIdx = 3
    const projects: Record<string, {element: HTMLElement, fontSize: number}> = {}

    function recalculateBaseFontSizes(){
      $all('.project-title').forEach((p, i) => {
        const innerText = $('a', p)
        const maxWidth = p.clientWidth
        let newFontSize = p.clientHeight
        let textWidth = innerText.offsetWidth
        for (let j = 0; textWidth > maxWidth; j++) {
            newFontSize--;
            console.log("New font size: ", newFontSize, textWidth, maxWidth)
            if(newFontSize < 5) {
              console.log("Reached limit, break")
              break
            }
            p.style.fontSize = newFontSize + "px";
            textWidth = innerText.offsetWidth
          }
        projects[i] = {
          element: p,
          fontSize: newFontSize
        }
      })
    }
    recalculateBaseFontSizes()
    console.log(projects)
    const pIds = Object.keys(projects)


    function recalculateOthers(){
      pIds.forEach((id, i) => {
        const p = projects[id]
        const highlightCorner = $(".highlighted-corner", p.element)
        highlightCorner.classList.add("hidden")
        p.element.setAttribute('data-active', 'false')
        const opacity =  (1 - Math.abs(i - currIdx) / pIds.length) * 0.5
        const fontSize = projects[i].fontSize / Math.max(1, Math.abs(i - currIdx) + 1 / pIds.length )
        const blur = Math.pow(Math.abs(i - currIdx), 1.25)
        p.element.style.opacity = String(i === currIdx ? 1 : opacity)
        p.element.style.fontSize = fontSize + "px";
        p.element.style.filter = `blur(${blur}px)`
      })
    }

    function recalculateActive(){
      const activeProject = projects[currIdx]
      const highlightCorner = $(".highlighted-corner", activeProject.element)
      highlightCorner.classList.remove("hidden")
      activeProject.element.setAttribute('data-active', 'true')
      activeProject.element.style.fontSize = projects[currIdx].fontSize + "px"
    }

    function handleActiveProject(e) {
      if(typeof e.deltaY !== 'undefined' ){
        const direction = e.deltaY > 0 ? 'down' : 'up'
        if (direction === 'down') {
          currIdx = (currIdx + 1) % pIds.length
        } else {
          currIdx = currIdx - 1
          currIdx = currIdx < 0 ? pIds.length - 1 : currIdx
        }
      }
      recalculateOthers()
      recalculateActive()
    }

    function handleResize(){
      $all('.project-title').forEach((p, i) => {
        let newFontSize = p.clientHeight
        p.style.fontSize = newFontSize + "px";
      })
      recalculateBaseFontSizes()
      recalculateOthers()
      recalculateActive()
    }

    const debouncedHandleActiveFn = debounce(handleActiveProject, 100)
    const debouncedHandleResizeFn = debounce(handleResize, 500)

    recalculateOthers()
    recalculateActive()
    window.addEventListener('wheel', debouncedHandleActiveFn.bind(this))
    window.addEventListener('resize', debouncedHandleResizeFn.bind(this))
  })
</script>
