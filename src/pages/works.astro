---
import Layout from '../layouts/Layout.astro'
import NextPageBtn from '../components/NextPageBtn.astro'
import Btn from '../components/Btn.astro'
import WorkDetails from '../components/WorkDetails.astro'
import Image from '../components/Image.astro'
import FakeLogs from '../components/FakeLogs.astro'
import { PROJECTS_LIST } from '../app/constants'
interface Props {}

const {} = Astro.props
---

<Layout title="Dominick Vale - â“’ 2024" data-menu-trigger="default" blurred>
  <h1 class="sr-only">WORKS</h1>
  <div
    class="mb-18 col-span-10 col-start-2 row-start-1 mt-12 flex flex-col justify-center lg:col-span-4 lg:col-start-2 lg:row-start-1 lg:mt-0 laptop-h:justify-start"
  >
    <FakeLogs />
    <div class="lg:ml-4 lg:mt-[3vh]">
      <div class="relative flex flex-col justify-center">
        <div class="image-wrapper" id="works-image">
          <Image
            contain
            class="2lg:h-[45vh] 2lg:min-h-80 relative my-auto flex items-center justify-center overflow-hidden"
          />
        </div>
        <!-- <div class="absolute bottom-[-5vh] left-1/2 h-[4vh] w-[1px] bg-lines"></div> -->
        <div class="2lg:max-w-[30rem] mt-6 hidden max-w-[90%] lg:block">
          <table class="text-xs">
            <WorkDetails />
          </table>
        </div>

        <div class="mt-4 w-full lg:hidden">
          <WorkDetails small />
        </div>
      </div>
    </div>

    <!-- <div class="mt-6 flex justify-center sm:hidden"> -->
    <!--   <NextPageBtn>BLOG</NextPageBtn> -->
    <!-- </div> -->
  </div>

  <div
    class="col-span-1 col-start-12 mb-14 ml-2 hidden h-full items-center sm:flex"
  >
    <NextPageBtn href="/blog">BLOG</NextPageBtn>
  </div>

  <section
    id="works-list"
    class="col-span-4 col-start-8 row-start-1 hidden flex-col gap-[6vh] pt-[10vh] lg:flex"
  >
    {
      Object.values(PROJECTS_LIST).map((project, i) => (
        <h2
          class="project-title relative flex ml-[-12%] h-[10vh] w-full items-center font-display font-bold uppercase text-primary-lightest"
          style={`--i: ${i}`}
          data-active={i === 0}
        >
          <a class="block w-max leading-[100%]" href={`/works/${project.name}`}>
            {project.name}
          </a>
          <div class="fui-corners highlighted-corner hidden h-full font-mono z-[100]">
            <div class="line-container">
              <div class="line" />
              <div class="circle" />
              <div class="dynamic-line" />
            </div>
            <div class="absolute bottom-[-2.7rem] right-0 flex w-3/4 gap-3">
              <Btn href={project.linkCase} class="w-full justify-start pb-3 pl-2 pt-6" frame>
                READ CASE
              </Btn>
              <Btn href={project.linkWebsite} class="w-full justify-start pb-3 pl-2 pt-6" frame>
                VISIT WEBSITE
              </Btn>
            </div>
            <small class="absolute left-8 top-[-1rem] text-xxs font-normal tracking-widest opacity-40">
              PROJ_ID: 00{i}
            </small>
          </div>
        </h2>
      ))
    }
  </section>
  <section
    class="col-span-10 col-start-2 row-start-2 flex flex-col text-center lg:hidden"
  >
    {
      Object.values(PROJECTS_LIST).map((project, i) => (
        <h2
          class="project-title-mobile h-[5vh] w-full font-display text-2xl font-bold uppercase text-primary-lightest"
          style={`--i: ${i}`}
          data-active={i === 0}
        >
          <a href={`/works/${project.name}`}>{project.name}</a>

          <div class="fui-corners highlighted-corner hidden h-full font-mono" />
        </h2>
      ))
    }
  </section>
</Layout>

<style>
  .project-title:not([data-active='true']) {
    transform-origin: bottom left;
  }
  .project-title {
    font-size: 10vh;
  }
  .project-title[data-active='true'] {
    margin-bottom: 5vh;
    color: white;
  }
  .project-title-mobile[data-active='true'] {
    color: white;
  }
  .highlighted-corner {
    width: 108%;
    left: -5%;
  }
  .line-container {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateX(-100%);
  }

  .line {
    width: 5vw;
    height: 1px;
    opacity: 0.2;
    background-color: white;
  }

  .circle {
    position: absolute;
    left: 0;
    top: -1px;
    width: 3px;
    height: 3px;
    border-radius: 50%;
    background-color: white;
    opacity: 0.8;
    transform: translateX(-50%);
  }

  .dynamic-line {
    position: absolute;
    top: 0;
    left: 0;
    width: 10vw;
    height: 1px;
    background-color: white;
    opacity: 0.2;
    transform-origin: left;
    transform: translateX(-100%);
  }
</style>

<script>
  import { $, $all, debounce, fitTextToContainer } from '../app/utils'
  import { PROJECTS_LIST } from '../app/constants'
  import { radToDeg } from 'three/src/math/MathUtils.js'
import Typewriter from '../app/modules/animations/Typewriter'

  document.addEventListener('DOMContentLoaded', () => {
    let currIdx = 3
    let isDesktop = window.innerWidth > 1024
    const projects: Record<string, { element: HTMLElement; fontSize: number }> =
      {}

    function recalculateBaseFontSizes() {
      $all(isDesktop ? '.project-title' : '.project-title-mobile').forEach(
        (p, i) => {
          const innerText = $('a', p)
          const newFontSize = fitTextToContainer(innerText, p, window.innerWidth * 0.003)
          projects[i] = {
            element: p,
            fontSize: newFontSize,
          }
        },
      )
    }
    recalculateBaseFontSizes()
    const pIds = Object.keys(projects)

    function recalculateOthers() {
      pIds.forEach((id, i) => {
        const p = projects[id]
        const highlightCorner = $('.highlighted-corner', p.element)
        highlightCorner.classList.add('hidden')
        p.element.setAttribute('data-active', 'false')
        const opacity = (1 - Math.abs(i - currIdx) / pIds.length) * 0.5
        const fontSize =
          projects[i].fontSize /
          Math.max(1, Math.abs(i - currIdx) + 1 / pIds.length)
        const blur = Math.pow(Math.abs(i - currIdx), 1.25)
        p.element.style.opacity = String(i === currIdx ? 1 : opacity)
        p.element.style.fontSize = fontSize + 'px'
        p.element.style.filter = `blur(${blur}px)`
      })
    }

    function recalculateActive() {
      const activeProject = projects[currIdx]
      const highlightCorner = $('.highlighted-corner', activeProject.element)
      highlightCorner.classList.remove('hidden')
      activeProject.element.setAttribute('data-active', 'true')
      activeProject.element.style.fontSize = projects[currIdx].fontSize + 'px'

      if (isDesktop) {
        const p = activeProject.element
        const line = $('.dynamic-line', p)
        const horizontalLine = $('.line', p)
        const horizontalLineWidth = horizontalLine.clientWidth
        const element1 = p
        const element2 = $('#works-image .fui-corners')

        const element1Rect = element1.getBoundingClientRect()
        const element2Rect = element2.getBoundingClientRect()

        const x1 = element1Rect.left - horizontalLineWidth * 1.3
        const y1 = element1Rect.top + element1Rect.height / 2
        const x2 = element2Rect.left + element2Rect.width
        const y2 = element2Rect.top + element2Rect.height / 2

        const dx = x2 - x1
        const dy = y2 - y1

        const angle = radToDeg(Math.atan2(dy, dx))
        line.style.transform = `rotate(${angle}deg)`

        const distance = Math.sqrt(dx * dx + dy * dy)
        line.style.width = `${distance}px`
      }
    }

    function updateProjectDetails(currIdx: number){
      const activeProject = PROJECTS_LIST[currIdx]
      const roleEls = $all('.work-details-role')
      roleEls.forEach(r => {
        Typewriter.typewrite(r, activeProject.data.role)
      })
      const clientEls = $all('.work-details-client')
      clientEls.forEach(r => {
        Typewriter.typewrite(r, activeProject.data.client)
        })
      const yearEls = $all('.work-details-year')
      yearEls.forEach(r => {
        Typewriter.typewrite(r, activeProject.data.year)
      })
      const techEls = $all('.work-details-tech')
      techEls.forEach(r => {
        Typewriter.typewrite(r, activeProject.data.tech)
      })
    }

    function handleActiveProject(e) {
      if (typeof e.deltaY !== 'undefined') {
        const direction = e.deltaY > 0 ? 'down' : 'up'
        if (direction === 'down') {
          currIdx = (currIdx + 1) % pIds.length
        } else {
          currIdx = currIdx - 1
          currIdx = currIdx < 0 ? pIds.length - 1 : currIdx
        }
      }
      updateProjectDetails(currIdx)
      recalculateOthers()
      recalculateActive()
    }

    function handleResize() {
      isDesktop = window.innerWidth > 1024

      $all('.project-title').forEach((p, i) => {
        let newFontSize = p.clientHeight
        p.style.fontSize = newFontSize + 'px'
      })
      recalculateBaseFontSizes()
      recalculateOthers()
      recalculateActive()
    }

    const debouncedHandleActiveFn = debounce(handleActiveProject, 200)
    const debouncedHandleResizeFn = debounce(handleResize, 200)

    updateProjectDetails(currIdx)
    recalculateOthers()
    recalculateActive()

    window.addEventListener('wheel', debouncedHandleActiveFn.bind(this))
    window.addEventListener('resize', debouncedHandleResizeFn.bind(this))
  })
</script>
