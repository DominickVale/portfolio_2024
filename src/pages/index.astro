---
import Layout from '../layouts/Layout.astro'
import Btn from '../components/Btn.astro'
import StatusItem from '../components/StatusItem.astro'
import NextPageBtn from '../components/NextPageBtn.astro'
---

<Layout title="Dominick Vale - ⓒ 2024" data-menu-trigger="default">
  <section class="col-span-12 col-start-1 mt-6 flex justify-center sm:hidden">
    <NextPageBtn>WORKS</NextPageBtn>
  </section>
  <section
    class="col-span-10 col-start-2 row-span-2 row-start-2 flex flex-col content-start justify-end text-xs taller:pt-[17vh]"
  >
    <div class="mt-4 flex justify-between sm:text-left">
      <div class="">
        <h2 class="text-primary">> whoami</h2>
        <p
          class="mb-3 select-none text-stone-300 sm:max-w-64 md:select-all"
          data-menu-trigger="text"
        >
          I’m just the quiet, value-centered guy that gets the work done. My
          interests range from front-end web development all the way down to
          reverse engineering, to mountain biking. Sounds interesting?
        </p>
        <Btn
          href="/about"
          class="mb-14 mr-auto mt-1 p-1"
          data-cursor-delay="1000"
          data-cursor-message="You should probably check this out"
          data-cursor-timeout="0"
          data-cursor-interval="30"
          data-text-scramble="READ MORE">READ MORE</Btn
        >
      </div>
      <div class="mb-14 hidden sm:flex">
        <NextPageBtn
          class="p-2 text-inactive hover:text-white"
          data-cursor-delay="1000"
          data-cursor-message="Let's go, in 'n out.<br/>2 minutes adventure."
          data-cursor-timeout="0"
          data-cursor-interval="35">NEXT</NextPageBtn
        >
      </div>
    </div>
  </section>
  <section
    class="col-span-10 col-start-2 row-span-2 row-start-4 font-mono font-black"
  >
    <h1
      class="ml-[-0.05em] mt-12 text-nowrap font-display text-[9.2vw] leading-[100%]"
      data-cursor-delay="2000"
      data-cursor-message="My actual name is Domenico"
      data-cursor-iterations="3"
      data-cursor-timeout="0"
      data-cursor-interval="40"
      data-aberration
    >
      DOMINICK VALE
    </h1>
    <!-- <h1 class="sr-only">DOMINICK VALE</h1> -->
    <!-- <img class="mt-6" src={nameSvg.src} /> -->
    <div class="mt-4 flex justify-between gap-[7%] text-sm lg:mt-6">
      <ul>
        <StatusItem class="text-nowrap" highlight
          >FRONT-END DEVELOPER</StatusItem
        >
        <StatusItem class="text-nowrap" highlight>CREATIVE DEVELOPER</StatusItem
        >
        <StatusItem class="text-nowrap">WANNABE ARTIST</StatusItem>
        <StatusItem>LEARNER</StatusItem>
      </ul>
      <ul>
        <StatusItem highlight
          >STATUS: <span
            class="text-success"
            data-cursor-delay="2000"
            data-cursor-message="(full-time or not)"
            data-cursor-timeout="2500"
            data-cursor-type="success"
            data-cursor-interval="20">AVAILABLE</span
          ></StatusItem
        >
      </ul>
      <ul class="ml-[32%] hidden md:block">
        <div class="flex flex-col"></div>
        <StatusItem highlight>AWARDS:</StatusItem>
        <p
          class="font-mono text-xs font-normal text-inactive"
          data-cursor-delay="2000"
          data-cursor-message="My mother says i'm<br/>really good with computers."
          data-cursor-timeout="0"
          data-cursor-interval="40"
        >
          COMING SOON :)
        </p>
      </ul>
    </div>
  </section>
</Layout>

<style>
h1{
  transition: text-shadow 0.1s ease-out;
}
</style>

<script>
  import { $all } from '../app/utils'
  const els = $all("[data-aberration]")

  let mouseX = 0
  let mouseY = 0
  let prevMouseX = 0
  let prevMouseY = 0
  let mouseVelocityX = 0
  let mouseVelocityY = 0

  const primaryColorWeight = 1.8

  function calculateMouseVelocity() {
    const dx = mouseX - prevMouseX
    const dy = mouseY - prevMouseY
    const velocity = Math.sqrt(dx * dx + dy * dy)

    prevMouseX = mouseX
    prevMouseY = mouseY

    mouseVelocityX = dx
    mouseVelocityY = dy

    return velocity
  }

  function applyEffects() {
    const velocity = calculateMouseVelocity()
    const maxOffset = 1.5
    const maxBlur = 0.8

    const offset = Math.min(velocity / 8, maxOffset)
    const blur = Math.min(velocity / 8, maxBlur)

    for(const el of els) {
      el.style.textShadow = `
      ${(primaryColorWeight * offset * mouseVelocityX) / velocity}px ${(primaryColorWeight * offset * mouseVelocityY) / velocity}px 0 var(--primary),
      ${(-offset * mouseVelocityX) / velocity}px ${(-offset * mouseVelocityY) / velocity}px 0 red,
      ${(-offset * mouseVelocityY) / velocity}px ${(offset * mouseVelocityX) / velocity}px 0 green,
      ${(offset * mouseVelocityY) / velocity}px ${(-offset * mouseVelocityX) / velocity}px 0 blue
    `

      el.style.filter = `blur(${blur}px)`
    }

    requestAnimationFrame(applyEffects)
  }

  document.addEventListener('mousemove', (e) => {
    mouseX = e.clientX
    mouseY = e.clientY
  })

  applyEffects()
</script>
